import Head from 'next/head'
import { serverSideTranslations } from 'next-i18next/serverSideTranslations'
import {useTranslation} from "next-i18next";
import {NextPageWithLayout} from "@/pages/_app";
import {getLayout} from "@/layouts/site-layout";
import {Button, Center, Container} from "@mantine/core";
import {useAccount, useConnect, useNetwork, useSignMessage} from "wagmi";
import {getCsrfToken, signIn, useSession} from "next-auth/react";
import {SiweMessage} from "siwe";
import {useEffect} from "react";
import {ConnectKitButton} from "connectkit";



const Home: NextPageWithLayout = () => {
  const {t} = useTranslation("common");
  const {signMessageAsync} = useSignMessage();
  const {chain} = useNetwork();
  const {address, isConnected} = useAccount();
  const {connect} = useConnect();
  // const {data: session, status} = useSession();.
  const handleSignin = async () => {
    try {
      const res = await fetch("/api/hello");
    } catch (error) {
      window.alert(error);
    }
  }

  useEffect(() => {
    // console.log(isConnected);
    // if (isConnected && !session) {
    //   handleSignin();
    // }
  }, [isConnected]);
  return (
    <>
      <Head>
        <title>{t('nextStartup')}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container maw={"xl"}>
        <Center>
            {t("hello")}
          <ConnectKitButton></ConnectKitButton>
          <Button onClick={handleSignin}>
            SignIn
          </Button>
        </Center>
      </Container>
    </>
  )
}

type Props = {
  locale: any,
}
export async function getStaticProps({ locale }: Props) {
  return {
    props: {
      ...(await serverSideTranslations(locale, [
        'common',
      ])),
      // Will be passed to the page component as props
    },
  }
}

// export async function getServerSideProps(context: any) {
//   return {
//     props: {
//       csrfToken: await getCsrfToken(context),
//     },
//   }
// }

Home.getLayout = getLayout;


export default Home;
